'use strict';var Gradiate=function GradiateModule(publicAPI){'use strict';var fallbackRgb=[0,0,0];var delimRgbPatt=/(\d{1,3}),\s?(\d{1,3}),\s?(\d{1,3})/;var hex3Patt=/^#?([0-9a-f]{3})$/i;var hex6Patt=/^#?([0-9a-f]{6})$/i;var isInteger=function isInteger(v){return typeof v==='number'&&isFinite(v)&&Math.floor(v)===v};var limitInteger=function limitInteger(val,min,max){return Math.min(Math.max(val,min),max)};var limitChannel=function limitChannel(channel){var channelInt=parseInt(channel,10);return isInteger(channelInt)?limitInteger(channelInt,0,255):0};var relimitRgb=function relimitRgb(str){return delimRgbPatt.exec(str).slice(1)};function hexToRgb(hexCode){var formatFn=function formatFn(value){var v=value.replace(/[^0-9a-f]/gi,'');return hex3Patt.test(v)?''+v[0]+v[0]+v[1]+v[1]+v[2]+v[2]:v};var parseFn=function parseFn(value){return parseInt(value,16)};var formattedHex=formatFn(hexCode);return[0,2,4].map(function(pos){return parseFn(formattedHex.substr(pos,2))})}function rgbToHex(arr){var parseFn=function parseFn(value){var str=value.toString(16);return str.length===1?'0'+str:str};return'#'+arr.map(parseFn).join('')}function getPalette(count,arr){var palette=[];var step=(arr.length-1)/(count-1);step=isFinite(step)?step:arr.length-1;var _loop=function _loop(i){var interpolate=i*step;var pre=Math.floor(interpolate);var post=Math.ceil(interpolate);var position=interpolate-pre;palette.push([0,1,2].map(function(channel){return parseInt(arr[pre][channel]+(arr[post][channel]-arr[pre][channel])*position,10)}))};for(var i=0;i<count;i++){_loop(i)}return palette}publicAPI.get=function(count,input){var valid=false;var parseInput=void 0;if(Array.isArray(input)&&input.length>0){valid=true;parseInput=input.map(function(o){if(typeof o==='string'){if(o.match(hex6Patt)||o.match(hex3Patt)){return hexToRgb(o).map(limitChannel)}else if(o.match(delimRgbPatt)){return relimitRgb(o).map(limitChannel)}}else if(Array.isArray(o)&&o.length===3){return o.map(limitChannel)}valid=false})}var palette=valid?getPalette(count,parseInput):getPalette(count,[fallbackRgb]);return{rgb:palette,rgbCsv:palette.map(function(arr){return arr.join()}),hex:palette.map(rgbToHex)}};return publicAPI}(Gradiate||{});