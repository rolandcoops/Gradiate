'use strict';var Gradiate=function GradiateModule(publicAPI){'use strict';var fallbackRgb=[0,0,0];var delimRgbPatt=/(\d{1,3}),\s?(\d{1,3}),\s?(\d{1,3})/;var hex3Patt=/^#?([0-9a-f]{3})$/i;var hex6Patt=/^#?([0-9a-f]{6})$/i;function isInteger(v){return typeof v==='number'&&isFinite(v)&&Math.floor(v)===v}function limitChannel(channel){var channelInt=parseInt(channel,10);return isInteger(channelInt)?Math.min(Math.max(channelInt,0),255):0}function hexToRgb(hexCode){var formatFn=function formatFn(value){value=value.replace(/[^0-9a-f]/gi,'');if(hex3Patt.test(value)){value=''+value[0]+value[0]+value[1]+value[1]+value[2]+value[2]}return value};var parseFn=function parseFn(value){return parseInt(value,16)};hexCode=formatFn(hexCode);return[parseFn(hexCode.substr(0,2)),parseFn(hexCode.substr(2,2)),parseFn(hexCode.substr(4,2))]}function rgbToHex(arr){var parseFn=function parseFn(value){var str=value.toString(16);return str.length===1?'0'+str:str};return'#'+parseFn(arr[0])+parseFn(arr[1])+parseFn(arr[2])}function delimitRgb(arr){return arr.join()}function relimitRgb(str){var splitStr=delimRgbPatt.exec(str);return splitStr.slice(1)}function getPalette(count,arr){var palette=[];var step=(arr.length-1)/(count-1);step=isFinite(step)?step:arr.length-1;for(var i=0;i<count;i++){var interpolate=i*step;var pre=Math.floor(interpolate);var post=Math.ceil(interpolate);var position=interpolate-pre;palette.push([parseInt(arr[pre][0]+(arr[post][0]-arr[pre][0])*position,10),parseInt(arr[pre][1]+(arr[post][1]-arr[pre][1])*position,10),parseInt(arr[pre][2]+(arr[post][2]-arr[pre][2])*position,10)])}return palette}publicAPI.get=function(count,input){var valid=false;var parseInput=void 0;if(Array.isArray(input)&&input.length>0){valid=true;parseInput=input.map(function(o){if(typeof o==='string'){if(o.match(hex6Patt)||o.match(hex3Patt)){return hexToRgb(o).map(limitChannel)}else if(o.match(delimRgbPatt)){return relimitRgb(o).map(limitChannel)}}else if(Array.isArray(o)&&o.length===3){return o.map(limitChannel)}valid=false})}var palette=valid?getPalette(count,parseInput):getPalette(count,[fallbackRgb]);return{rgb:palette,rgbCsv:palette.map(delimitRgb),hex:palette.map(rgbToHex)}};return publicAPI}(Gradiate||{});